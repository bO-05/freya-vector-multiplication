# TIMESTAMPS:

00:00 Intro
04:34 Talk Start
05:17 Anatomy of a Vector
06:09 Products
09:14 Numbers of different kinds
13:32 Complex Numbers
18:10 Code for complex numbers
19:10 Complex multiplication visualized
20:22 Multiplying Vectors (an attempt)
24:08 Frustration
24:36 A Leap of Faith
25:36 A divine axiomatic truth
26:40 Squaring Basis Vectors
27:46 The Diagonal of Bases
29:09 Vector multiplication unraveling
29:36 Dot/Cross Byproducts
30:32 Complex Byproduct
31:17 Quaternionic Byproduct
31:52 The Answer
32:52 Beyond the Algebra
33:29 Basis Bivectors
35:06 Conceptualizing Vectors & Bivectors
37:08 Wedge Product
38:46 Curvature Bivector
40:59 Mental Gymnastics
41:56 Geometric Algebra & Multivectors
43:19 What does the multiplication represent?
44:10 Outro
45:53 Q: When is this useful?
48:11 Q: Does your math lib support geometric algebra?
49:22 Q: Do you plan on making tools for other engines?
50:53 AV team kicking us out

----------------------------------------------------
----------------------------------------------------

# TRANSCRIPT - generated by Deepgram

Speaker 0:

Alright. So math and cats, enough said. Right?

Speaker 1:

We're all

Speaker 0:

at first sight. So just kidding. Freya is an independent game developer and educator. And today, she's going to talk about a topic that to some is the stuff of nightmares, and to others, like myself, is perhaps a little bit more the stuff of dreams and all the squiggly lines in between. So in her talk, she's going to hopefully inspire you all to consider the math underlying our games a little bit more magical.

Thank you.

Speaker 1:

Okay. Hello, everyone, to probably the most technical talk. I'm gonna teach you all about set theory and quaternions. But so this talk is called, uh, why can't you multiply vectors? And so I've been doing a lot of things within game development and math for a long time now.

I started out doing just I started out as an environment artist, and then moved into, like, level design, and then I eventually learned programming, and I got really excited about that. And then I got into math, like, very heavily the past, like, 2 years or so. And now I've sort of, like, dived so deep into math that sometimes the stuff that I talk about, game developers are like, oh, this just seems like useless abstract nonsense. Like, why are you even doing this? Like, I just want to make a game.

I just want to copy paste my math from the Internet and just, like, paste it into my game so that it works. I don't care about the underlying stuff. Um, but today, I wanna talk about that underlying stuff anyway, so you're gonna have to suffer through that. So there's a bit of a schism sometimes between math and programming. So I sent, uh, this tweet at some point, um, on 9 11 of all days, so this is my personal 9 11, because this started a war between programmers and math people, uh, which was really weird, but, like, all the math people were like, what what are those for loops?

That makes no sense. Like, all of these symbols, they look so complicated and weird. And then you had all of these programmers that were like, well, what are those weird symbols? Like, there's no context for this. There there's nothing describing what that does.

You just have to know what that does. Right? But so so all I really wanted to do was kind of like draw this like simple analogy for people who might not know that much math to just be like, okay, so these summation symbols is just adding things up in a for loop, and the capital, um, capital pi is just a product. You're just multiplying things together. And so though those interesting, because because it kind of illuminated to me that there's this big schism and or, like, big divide, but I kinda wanna merge, and I see that as sort of my job in a way of trying to bridge that gap.

Um, a little bit about me, uh, you probably don't care that much. I've co founded this studio called, made a game called Budget Cuts and Budget Cuts 2. We're with studio of, like, 7, very awkward size. Um, made some plugins for Unity, uh, one called Shader Forge and one called Shapes. Uh, one is a, um, shader editor, and the other one is a vector graphics plugin.

But I'm also working on a spline plugin right now that is not released yet. Uh, I also make YouTube videos, so I made some videos about tech art, math, uh, and tool development, uh, mostly within Unity. And then I've also made some YouTube videos about Bezier curves and splines. Alright. Um, so I'm a tech artist.

That's kind of the the center of what I do. It's kind of the intersection of art and programming, and math kind of comes in there to do all of these kinds of weird funky, techy visual solutions to problems in games. Um, so a lot of the stuff I do is just, like, trying to work out things like how do you render lines in a way that looks nice? Because, you know, you have, like, a naive implementation, might look like garbage, But if you, like, spend some time thinking about it, you can make something that looks much much prettier. Um, and so a lot of the work that I've been doing as of late has to do with splines.

This is an excerpt from my video. Um, it's just just just a lot of splines. I've just had splines in my head for, like, the past 3 years, and I can't get them out, and so here I am. Uh, recently, I've been getting into, like, quaternionic splines, or just, like, splines in quaternion space to, like, interpolate orientations, and some torsion visualizations. I I don't know.

I have a bunch of things related to this that I do. That's a dodecahedron. Anyway, so in this talk, we're gonna explore why can't you multiply vectors. And And as with any other talk, I think you should always start on the second slide with some common criticisms of the title of the talk. And so some common criticisms might be, yes, you can.

It's called a dot product. Like, what are you talking about? Uh, or you might say, well, yes, you can. It's called a cross product. Like, why why do we mean you can't multiply vectors?

Uh, or you might say, what do you mean? I multiply vectors all the time. This could be early signs that you might be a shader programmer. And no, you're actually not really multiplying vectors. And you're gonna find out why.

Um, so the anatomy of a vector, just to go through what what we're actually talking about. We usually write it in bold letters, and that's a vector v. It has 3 components if it's a 3 d vector. Realizing I'm forgetting to breathe, because this is I have so much to talk about. Um, so we have 3 components, uh, x component, the y component, and the z component.

Usually written in the parenthesis. Right? And you can also write it as a column matrix if you want to, which can be useful sometimes because you can, like, write longer lines for each component. It's kinda useful. And this kind of presumes a basis, as in the basis vectors of our coordinate system.

Right? We have an x axis, we have a y axis, and a z axis, and they're all orthogonal to each other, and they have a length of 1, so they're orthonormal, is what we call it, in the industry. Alright. So products. We we obviously know about the dot product, everybody's heard about that, and it's some kind of multiplication.

Right? You have your vector a, your vector b, and then you write little dot in between, and then the dot product is basically multiplying each of the components and then adding them all up into a single scalar value. So it's sometimes called a scalar product. You can also write it using these summation notations, so it's like dimension independence. So if you wanna do the dot product in any dimension, you can use that formula.

Uh, I hope it's readable and not too small. And then we have the cross products. The cross products does not return a scalar. It returns a vector. So the cross products, uh, we have this kind of a complicated formula of just picking out very specific components for, um, each of the x y and z components of the final output vector.

That's the cross products. And then we have the 2 d, quote unquote, cross products, which is illegal. Don't tell your math teacher that you've been using a 2 d cross product because it doesn't really exist, but it's a very useful thing in games to have. And that's basically a cross product where you just set z to 0, and then whatever's left is your 2 d cross product. Uh, it's also sometimes known as the perpendicular dot product or the exterior product, or the determinant, or the wedge product, or the antisymmetric product.

It has many names. I don't know why. It's annoying. And then finally, we have the Hadamard product, which is the shader programmer product, where you just say, well, just just multiply the components. Like, just just do that.

Like, why not? Just take every component, multiply them together. That's your new vector. So that's a component wise product. Okay.

So we have the dot product, we have the cross product, and we have the Hadamard product. But what about the product? Like, just just smash them together, no goddamn symbols in between, just the canonical products. Right? Because usually, you don't write anything in between.

If you if you want to write 5 x, you don't do, like, you don't have to write a symbol there. In math, you just, like, have no symbol because multiplication is kind of the canonical main operation. Right? And so I think a lot of people, me included, a few years ago, I was just like, just do it component wise. Like, why do you why are you overthinking this?

Like, if you multiply a vector by a scalar, like a vector like 2 times a vector a, you just multiply each component by 2. Right? So that's component wise. If you divide it by 2, that's also component wise. Uh, if you add 2 vectors, that's also component wise.

We add the x axes together. We add the y, uh, components together and the z components together, also component wise. Uh, subtraction works exactly the same way. So why would multiply not just be the Hadamard product? You just take each component and multiply them together.

Right? Just just don't worry about it. Just just go ham. Just just multiply all of your vectors and don't care about the rest. It's gonna be fine.

But it's not that simple, unfortunately. Uh, so I'm gonna take you all back to elementary school, and I'm gonna talk about the natural numbers. So the, uh, integers starting from 0 and up, so all of the positive integers and usually 0 as well. That's when you count things. So we're gonna we're gonna count, uh, snail cats.

So here's a snail cat. So let's say you have 2 snail cats, and then you add 3 snail cats. How many do we get? We get 5 snail cats. Isn't that amazing?

Um, so 2, 3, and 5 are all natural numbers. We can count items using natural numbers. Right? Um, so let's let's try multiplying. So 2 snail cats multiplied by 3 snail cats is 6 snail cats.

Great. That's perfectly fine. Just one more. Um, so we have 2 snail cats minus 3 snail cats, and then we get well, that's not actually a natural number anymore. Right?

Like, 2 minus 3, now we get something negative. And that's not within the realm of natural numbers. Like, negative negative is not a natural number. Right? And so in a very technical sense in math, we usually say that natural numbers are closed under addition and multiplication, but it's not closed under subtraction, because it's possible to leave the realm of natural numbers if you subtract.

Right? Because 2 minus 3, not a natural number. Okay. So we can talk about numbers of different kinds. Right?

Natural numbers, we can add them, that it's closed under addition. We get a natural number if we add 2 natural numbers. Same with the multiplication, uh, but not subtraction because then we need the integers. The integers, uh, they have these, like, technical symbols, the blackboard bold, um, so natural numbers are n, integers are z, for some German reasons, I think. I don't know what it is.

Um, so then we need integers, and that includes the negative numbers. Right? The negative integers. Okay. So integers are closed, uh, oh, right.

So subtraction of natural numbers gives you integers. Uh, integers are closed under, um, addition, multiplication, and subtraction, and we've gone into the realm of rational numbers. So rational numbers is an integer divided by another integer. So with division, with natural numbers and integers, uh, we get a rational number. Um, we can also do exponentiation.

So if if you take, like, a natural number or, like, 2 to the power of 3, uh, that is also a natural number. So we stay with the natural numbers there. So it's also closed under exponentiation. But integers are, uh, again, if you do integers and you do powers on those, so, like, uh, 3 to the power of negative one would also give you a rational number. Alright.

Rational numbers, uh, closed under addition, multiplication, subtraction, division. You get a rational number out of that. You don't change the kind of number. Exponentiation gets a little bit more complicated, um, because you could do to the power of 0 point 5, which is a, uh, square root because 0.5 is just 1 over 2. And then we need the real numbers.

So the square root of 5 can't be expressed as an integer divided by an integer, uh, but the real numbers are closed under all of these 4 operations. But then we might wanna go to the next step. Like, what about exponentiation? And here's where we enter complex numbers, uh, because now it's getting a little bit weird here, because, um, that's just an entirely different type. Because a real number is just all the usual numbers we're familiar with, but the complex numbers, uh, can express things like the square root of negative 5.

Um, in real numbers, we we usually say that you just can't do the square root of a real number. Uh, but with complex numbers, we have a way to express that. And complex numbers are algebraically oh, no. Sorry. So complex numbers, um, how many of you know what complex numbers are?

Raise your hand. Quite a few. Okay. So I can sort of speed run this this one. Okay.

So let's say we have a thing called I, and if you square I, you get negative one. It's just an algebraic symbol. It's a variable like any other, but the only thing we know about it, we don't know its contents or its value, the only thing we know is that it squares to negative one. In other words, if you multiply it by itself, we get negative one. Um, and this is called the imaginary unit.

Uh, and this is just axiomatically true, which is math speak for because I told you so, it is true, and we just have to accept that. Right? Okay. So how do we do math with this? Well, if we have 3i times 2i, that would be 6i squared.

And since I squared is negative one, this is equal, uh, because we can apply this rule of I squared equals negative one, then this becomes negative 6. Okay. Another example, 2i times 4i minus 3. We just distribute that, and then we get 8i squared minus 6i. Again, I squared is negative one, so we get negative 8, um, minus 6 I.

And we can sort of think of these numbers as having 2 parts to them. The first part here is the real number. This is just a regular RAS number that we use all the time. And then we have a coefficient of I. So this is called the imaginary part.

And you can kind of divide these up into these 2 separate categories. And that's what's called a complex number. So that's when you have a a a regular number, a real number, and then some coefficient of I. Okay. So let's say we have a complex number z, then we can interpret it similar to a vector, because a vector also has 2 parts.

Right? If you have a a 2 d vector, you have an x component and a y component. Um, similarly, we can write complex numbers the way we write vectors, just in parentheses. Right? Where we have the real part and the imaginary part.

And now the basis is just the value 1 and I, because that those are the things we multiply each of the components by in order to get the final, uh, results. Right? So you can kinda see the similarity between complex numbers and vectors, like, they both have 2 components, well, for 2 d vectors. Um, and so you can define a coordinate space using vectors. You have an x axis and a y axis.

You can also just do the same with imaginary units. So you can have a real axis for the real numbers, and a vertical axis that's the imaginary axis. And then for writing coordinates, we just do exactly the same thing we do for vectors. So for 2 d vectors, we have maybe this coordinate would be 12. So 1 on the x axis, 2 on the y axis.

Uh, can do the same for the, uh, complex numbers. So this is called a complex plane. And it's just the same. It's just 12. It's just that we're using a different basis.

The cool thing about complex numbers is that we can actually just write them as a formula, like the way we did before, just 1+2i. That's what this represents. Right? Um, and so this is really useful. What's useful about this one is that we can do algebra with this.

We can if we have this formula, we can just add them together or multiply them and just see what happens. Right? And so if we wanted to find out, like, okay, what happens when you multiply 2 vectors? Uh, well, if if complex numbers are vector like, we can figure out what happens when you multiply 2 complex numbers. And maybe that's gonna give us, like, some answers along the way for how to multiply vectors together.

So we can just try to work go through that process. So, like, let's say we have 2 complex numbers, a complex number a and b. We multiply those together. So we just write them out as equations. Um, and as usual, we just distribute uh, or, like, expand the whole thing.

Uh, then we might notice that, oh, this part has 2 i's in it. Right? So it's it's I squared, which means that it's equal to to negative one. So we multiply that whole thing by negative one. And so now we can see that this part, they share a common factor of I, so we can factor that out.

And now we get a complex number in the end. So we had 2 complex numbers. We multiply them together, just regular multiplying, no dot products or cross products or anything. We're just multiplying them together. And in the end, we get another complex number.

Because we can express this as a coefficient of just a real number and a coefficient of I. So so what we can say is, again, complex numbers are closed under multiplication because we give 2 complex numbers, and we get a complex numbers out of it. So if you wanna implement this in code, like, this is how you would write that. The the actual symbol of I is never in your code. It's just completely not there.

The I is only there to, like, help us define the algebraic operations that we do using this. And and so we had our formula here. Right? So we're we're calculating some sort of real part from 2 complex numbers. And then we get the real part here.

And then we we calculate the imaginary part. We get the imaginary part. Then we'll return a complex number. So we only ever store the coefficients. We don't ever store, like, the the weird I symbol.

Right? So the the reason we can do this is because it's closed under multiplication. That's why it returns a complex number. Okay. So so what does this look like?

Because now if we interpret this as a vector, we should be able to visualize this because it we can interpret complex numbers as 2 d vectors. And this is what it would look like. So here we have 2 vectors, the red one and the blue one, and we multiply them as complex numbers in the complex plane, and the green vector is the result. And you might be able to tell that it has something to do with, like, sort of adding the angles up. Right?

It's kind of like taking the angle of 1 of the vectors, adding it to the other angle, and when it's normalized, you can see that the vectors have the same length. Like, the green one doesn't get longer or shorter than the red one or the blue one. And so so this one is while it's not a vector multiplication, it's still a complex number multiplication. We might be able to apply some of the same strategies for figuring out, like, what happens when you multiply vectors. Okay.

So now we figured out that complex numbers are closed under multiplication, and in fact, they are closed under all of these operations. Uh, and it's the only I think it's called a complete algebra. Uh, I think it's actually the only complete algebra within math, which I I think is kinda cool, um, that it's closed under all of these operations. All right. But what we really want to figure out is vectors.

Right? Like, that was the whole point of this talk. Like, why can't we multiply vectors? Like, it should be possible. I really want to try to do it, you know?

So if we go back to this, we could write our complex numbers as a real part plus a an imaginary part times I. So why can't we do that with vectors? We have an x component, we multiply it by a symbol representing our x axis, and then we add the y component multiplied by a symbol representing the y axis. As of now, if we use this, again, we can do algebra with this. Right?

Like, now we can actually just do it ourselves instead of just listening to our math teacher or me. You can just, like, actually do it yourself. Right? So now we have another way of writing vectors. In other words, like this.

If we have a 3 d vector, we just take each of the components and multiply multiply them by the symbol representing each of the 3 basis vectors of our coordinate system. Okay. So if we have 2 vectors, a and b, these are 3 d vectors, uh, we can write them like this. So these again, we have the components, we have the axes, and then we can do some algebra with this. So let's do something simple, like multiplying a scalar by a vector, just a number times a vector.

We have a number of different things. We have a number of different things. We have a number of different things. We have a number of different things. We have a number of different things.

Which is what we would expect. Right? Because it we've been told that that's component wise, and it seems to be. Right? Alright.

Let's try one more. So addition. So if we want to add these 2 vectors together, we can remove the parentheses because they're useless. Uh, and then we can find some common factors here. There's a common factor of the x axis.

Again, the red x is just referring to the abstract concept of the x axis. And so we just factor out, uh, those axes, and we end up with this. And now, again, we have a clean, like, factor of x y and z separately. And so we can say we can say that addition is component wise, which is what we were told before too, so I guess they were right. So that's component wise.

Fine. And if we do this with all of these operations, we can find that both addition and subtraction is component wise. But we haven't multiplied 2 separate vectors yet. Right? We will learn on a scalar times a vector, but not a vector times a vector.

And so what's that gonna be? Like, are we gonna stay within the realm of 3 d vectors? Like, kind of like the cross product. The cross product, you know, has us stay in there. Right?

Or maybe we we're kind of like the dot product, where we just get a real number out of it instead of vector. Right? Okay. So let's let's find out. We have the tools.

Right? We we can just have our 2 vectors, a and b, multiplying them together. No goddamn symbols in between, just a pure multiplication. We write it out. That's this is the equation we just have to solve for.

Right? Like straight up multiplication. Uh, there's a lot of terms here, because you need to multiply these together, and you get this, which is a x b x x x, which is a little bit abstract. We don't quite know what that is yet. Um, and then we just keep on doing this, and we end up with a lot of terms, uh, and so there we go.

There we have it. So so this is what happens when you multiply, uh, 2 vectors, I guess. But now we have a little bit of a problem. Like, it's like this is not a vector anymore. Like, we can't write this as a factor of x, plus a factor of y, plus a factor of z.

Like, this is just a pile of nonsense. Right? Um, and so we can see that vectors are just not closed under multiplication. We don't get a vector out of this, it seems. Uh, and so, uh, that's why you can't multiply vectors.

And so thanks for coming to my talk. Hope hope this is useful. And so obviously, that doesn't feel enough. Right? Like, okay, we found out that it was it had this weird solution, but like but but what is it?

Like, I I need to find out, like like, we we have to solve this. We haven't solved it yet. Like, what it obviously gave us some sort of algebraic structure and we need to investigate this and actually, like, decode this whole thing because there has to be answers in there. Right? Like, I'm willing to go to the ends of the earth to just, like, approach this whole problem and just figure out everything, and maybe we need to take a little bit of a leap of faith as a treat.

And so, we're gonna ask an oracle, a divine being of incomprehensible wisdom. Oh, great oracle Salad, his name is Salad, um, we made a feeble attempt at multiplying vectors and we seemed to have reached an impasse. Can you illuminate us? The divine being contemplates for a second and says, I see. A tricky conundrum indeed, but fear not.

The answers you seek are closer than you think. Don't worry, you are safe now, my child. I bestow upon you a key to understanding. Venture forth and the answers you seek will be revealed to you. Now, I must nap.

Leave me be. And the divine being turns into a non Euclidean manifold. Okay. So this is some sort of divine axiomatic truth we were given. Oh, so what does this say?

So it's a vector, so it's in bold. So if you multiply a vector by itself, in other words, square it, you get the length squared, Like the length of that vector multiplied by itself. But this is not the full answer. Right? This is just what happens when you multiply a vector by itself, but we wanna know what happens when you multiply 2 arbitrary vectors.

Okay. But let's experiment with this. So let's say we have a vector with the values 123, and we wanna square this. In other words, multiply it by itself. According to our divine axiom, it is the length squared.

And the length, we can just use the pythagorean theorem. Right? That's we've learned that in school. And then we square that. Uh, the square root and the square cancel out, and so we're left with 1 squared plus 2 squared plus 3 squared, and we have 14.

Okay. So if we square a vector, we get just a real number, and in this case, it's 14. Okay? So let's explore this some more. So what about our basis vectors?

Because we have an x axis, a y axis, and a z axis. They all have a length of 1. Right? So what happens when you multiply those 2 together? Well, following our axiom, that should be equal to the length squared, which is just one squared.

Right? And so that's just 1. So if you take our x axis and multiply it by the x axis, we get one out of that. And all of a sudden, we actually have gotten one key to the solution here because those all of these terms that are crossed out, they just evaluate to 1. So those three terms are just multiplied by 1.

Right? Okay. So now we've, like, started to unravel this a little bit. So now we we can, like, separate out those terms. We have, like, a like, that's just a real number, because those are no longer multiplied by a vector.

Right? Alright. But we still have a bit of a mess on the lower part. Like, what the heck is y z and x z and y x? Like, that that's still nonsense to us.

Right? There's actually one more thing that our divine axiomatic rule gives us. So if you consider the basis vectors, again, mutually orthogonal, they have a length of 1, yadayada. If you consider the diagonal between x and y, just x plus y gives you this white vector. Right?

And we know that the length of that one is the square root of 2 because we've we can use the pythic orient theorem for that. Right? Um, and so then we can actually make use of our axiom to find out some more about this, because we can plug in the length that is the square root of 2. So if we take our vector, the white vector is just x plus y, and we square that, we should get something that is the square root of 2 squared. So the left hand side, we can expand.

The right hand side, we can just cancel out the square root. And so we get the expanded form of x x plus x y plus y x plus y y, and that's equal to 2. Alright. But we know that x times x is 1 and y times y is 1. Right?

We already figured that out. So now we have this. We can subtract 2 from both sides. So we end up with x y+yx equals 0, and if we subtract y x from both sides, we get this. And this might seem kind of innocent, like, okay, sure.

Like, we have x y equals negative y x. So the components are swapped and negated. But it means that they're equal, so we can swap components at will. Because if they're basis vectors, then we can do this. Okay.

So going back to our equation here, we can see that in the top one, we have y z on the first term, but then we have z y on the other one. So what we can do is that we can swap these two terms and then negate that term because we we now have this rule of x y equals negative y x. So we swap them, and now we have subtraction symbols there instead of addition, and then we can factor those out. Do any of you recognize these? Do do these formulas seem familiar?

Like, some something seems to have kind of jumped out at us. Right? Like, the this is the dot product, and we never set out to define the dot product. We just followed the divine command we were given of, like, the square of a vector is the magnitude squared, and somehow we got the dot product out of it as a complete, like, side effect. This is the cross product.

The cross product somehow also jumped out of us, so we just somehow invented both the dot product and the cross product without ever intending to do so. We just wanted to know what happens when you multiply 2 vectors. Right? And so everything stems from this one rule, But we still have a mystery of, like, what the heck are these anyway? Like, y z z x x y are just kind of confusing constructs.

We we know nothing about them. Right? So let's explore those a little further and see what happens with those. So for example, maybe we can try seeing what happens if you square them. We take x y squared, that equals x y x y, and we know that we can swap 2 of these and negate, and that's gonna be the same thing.

So if we swap the middle two components, we get negative x x y y. We know what x x is, we know what y y is. Right? So we get negative one times 1. So we know that that's equal to negative one.

So we have a thing that we can square that gives us a negative one. That's the imaginary unit. We didn't set out to invent the imaginary unit either. This is all just still stemming from that one axiomatic rule, And this actually applies to the other combinations as well of zx and yz. Um, and so if you mash them together like this, that will all all of that equals negative one.

And you might have seen this in a different form before. So I squared equals j squared equals k squared equals I j k equals negative one is the definition of quaternions. That's the the way quaternions are defined right now. And so what seems to have happened is that when we multiply 2 vectors together, 2 3 d vectors together, we we get a quaternion, which is written with an h for Hamilton. And so that's kind of weird, isn't it?

Um, and so so this thing that we have here has a basis of 1, y z, z x, and x y, and that has the exact algebraic behavior of quaternions. And each component, obviously, it's a factor of each of these, so you can there it's a multiple of each of those bases. And so that's our quaternions. And And so what about 2 d? Like, we haven't looked at 2 d vectors now, so we should try 2 d as well.

Um, that's just setting z to 0. And if we multiply 2 two d vectors together, we get this. And this has a basis of 1 and x y, which that's the complex numbers that still just has the same algebraic behavior as complex numbers. But so this is fascinating and kind of weird that we just, like, went through this algebraic journey, and somehow, like, multiplying vectors gives us quaternions and complex numbers. But again, like, what what are these things?

Like, what what is y z and z x and x y? And, like, we still don't know. Like, we we kind of want to find that out too. So if we consider the basis vectors of a coordinate system, our x y axis, or in 3 d, our x y z axis, they are they all have a length of 1, and they're all mutually orthogonal. So that's our basis vectors.

The things we're trying to figure out now are these, like, y z and z x and all of that. Right? And these look suspiciously similar to the cross products, don't they? And the cross product has this behavior of if you have 2 vectors, a and b, and you do the cross product, you get something that's perpendicular to both of them. In other words, it's normal to the plane formed by those 2 vectors.

And it also just so happens that the magnitude, the length of this green vector, is the area formed by the parallelogram between those two vectors, uh, both in 2 d and in 3 d. So maybe this has something to do with planes rather than, like, points in space. Right? All right. So if we have our, um, our x y component, that's that's the only one we have in 2 d.

That was the one that was equal to the imaginary unit. And in 3 d, we have y z z x and x y. So what if we conceptualize these these these bases as planes? So so maybe our our x y is refer refers to the plane formed by x and y, and specifically the unit plane, like a plane with an area of 1. And if we extend this to 3 d, there's obviously 3 planes now that are the the basis planes of our coordinate system.

And so maybe we can call these basis bivectors. So that's what that's what we're gonna name these. They're not quite vectors, but they're sort of like 2 vectors forming a plane, you know, so let's call them bivectors. They have an area of 1, and they are mutually orthogonal. And so the way to think about this is that if you have a regular vector, like a point in space, um, then it's kind of like casting a shadow onto each of the axes.

Right? The the 3 components of a vector is just how far along each axis is this point. And so for bivectors, it's the same thing, but instead of points along axes, maybe we can interpret this as an oriented area, casting shadows on each of those 3 basis bivectors, the 3 basis planes. And so a bivector has those three numbers. It looks very similar to a vector if you just look at those numbers.

Right? Um, but we interpret it as a bivector. So it's an oriented plane with an area, and and that's it. It has no position or anything like that. And if we manipulate it, you can see that the the numbers change as well.

So this is just me turning it around in unity. Um, and so so again, we get kind of the shadow on each of those 3, uh, planes. And it can be negative, so we can we get assigned area on each of those 3 those 3 planes. Uh, and obviously, it has an area, so we can we can scale it up as well. It can be larger, it can be smaller, and so forth.

Um, and so so those so so this is what a bivector would look like if you just write it in code. You have, like, just 3 components. It looks awfully similar to a vector, but algebraically, it's entirely different because the basis is y z z x, and x y. It's not x y z. And in fact, these bivectors, they represent represent the minimum information required in any given dimension to store both a plane and a magnitude.

And and this is why, uh, it shows up quite a lot when dealing with rotation rotations because rotations happen in a plane. Right? Like, they don't really happen around an axis. Like, if you have rotations in 2 d, there's no third axis to speak of, but there is a plane you can rotate in. Right?

And so, um, if you look back at the cross product, the cross product again gave us a vector. So it has an x y and z, uh, component, which just a regular vector. But the thing about the cross product is that in math and physics, we talk about something called a pseudo vector, uh, which is it has, like, these weird transformation rules. Like, if you mirror the result of a cross product, it doesn't have the, like, expected behavior. And it only works in 3 d and 7 d.

Don't ask me why. It's just the way it is. And it has all of these hidden transformation rules. The thing we were doing now where, uh, we returned a bivector instead is called a wedge product. And usually you write it with this little hat thing.

Um, and so it algebraically, it's exactly the same in terms of the coefficients, but the bases we use are completely different because we have y z z x and x y instead. So this returns a bivector. It generalizes to any dimension. It has to be only 3 d and 70 or whatever. And it's a that's a little harder to understand, though, because, like, we were never really taught about bivectors in school.

Right? Or at least I wasn't, but and so so here we have the the the 3 d and the 2 d vector multiplication. We can write it a little bit more generalized by saying that multiplying 2 vectors together is the dot product plus the wedge product, uh, of those 2 vectors together, because the wedge product gives us the bivector part of that multiplication. Let's see. Does this work?

Oh, shit. It works. Hell, yeah. I thought Internet wouldn't work. And another place where this actually shows up that I ran into, uh, is in when talk is when talking about a thing called curvature.

Um, so here you can see something called the, uh, osculating circle. So this is kind of the circle that matches the curvature of this spline that it's moving along. And the radius of that is 1 divided by the curvature. Um, so if if instead of thinking about the radius, you think about the inverse of the radius, and that's curvature. So a curvature of 0 is a straight line.

A curvature of 1 turns in one direction. A curvature of negative one turns in the other direction. Uh, anyway, so useful concepts. Um, and so if we wanna measure curvature of a parametric function, say, this is how you would do curvature in 2 d. This is just, like, straight up from Wikipedia if you wanna see how to measure curvature.

Uh, this is a scalar, and it can be be it's signed. In other words, it can be both negative and positive. Um, and then we have curvature in 3 d. And here, we have the magnitude of the cross product between the velocity and the acceleration divided by the speed cubed. Um, and so so these are like, these look very different if you're not familiar with everything that we just talked about.

Um, but like, this one is always positive because we're getting the magnitude of a vector. So all of a sudden, it's no longer signed. There there's no, like, negative curvature or positive curvature. And what about the axis? Like, if curvature turns kind of around an axis in 3 d.

Right? And so these 2, that's a still looking a little sus. Like, now we we can kind of recognize these patterns. Right? And so this is just a wedge product.

So we've kind of been mistaken in thinking about the curvature and thinking of them as, like, either a scalar or the cross product or the magnitude of the cross product. But if we just do the wedge product instead, that is just much more simple, and it generalizes to any dimension again. Um, and so instead of returning to the scalar or a vector, we get a, uh, bivector out of that. Yes. I'm gonna go a little bit over time.

Are you all okay with that? Okay. I'm almost done. Um, so this is kind of a generalized curvature. Anyway, so so what I think is cool about this is that throughout math, we've had this thing of, like, like, mental gymnastics of, like, you can't really multiply vectors, but but here's 8 different products.

Just use those instead. And and also the cross product doesn't work at all in in all dimension, but it works in 3 d and, like, 5 d or or 7 d maybe, like one of those one of those, and also cross product returns a pseudo vector with like special transformation rules, so it's not really a vector, and and called complex numbers, they're like 2 d vectors, but also not at all, but they can rotate, and and quaternions are like an extension of complex numbers with the rules I squared equals j squared equals k squared equals I j k equals negative one. It's just like, Jesus Christ. Right? Or we can just say that if you if you square a vector, you get the length squared.

That seems a little bit more simple, and then everything else, all of those things we talked about, just naturally emerge from that definition. What we've been talking about is called geometric algebra. More specifically, it's a Clifford algebra. If you take all of these components and, like, combine them into a big multivector, in 2 d, they will look like this. We have a a scalar.

We have or a real number. We have a vector and a bivector. Vector has 2 components. Bivector only has one component. That's a full 2 d VGA multi vector.

So VGA is either vanilla geometric algebra or vector geometric algebra. People haven't agreed on this. Uh, then the 3 d multivector looks like this. So the vector has 3 components now, and the bivector also has 3 components. And this is why we probably mixed up vectors, pseudo vectors together because, like, they both have 3 components in 3 d.

Uh, but it's actually much better to express the results of the cross product as a bivector instead. Also a thing called a trivector, which is the the unit volume formed by the 3 basis vectors. Um, we're not gonna get into that. And so so basically, all of these concepts that we've kind of, like, juggled around with all these special rules, they can actually generalize in a really clean way using this this framework. Right?

Uh, so instead of, like, separating, like, complex numbers and quaternions as, like, separate things, we can just call them rotors, and that's a real number plus a bivector of that given dimension. And so, finally, after this whole journey, you might be wondering, like, well, if multiplying 2 three d vectors gives us a quaternion, and in games, we use quaternions for rotations. What rotation does that represent? Like, what happens when we do that? And this is what it represents.

So we're multiplying these 2 vectors together, and the orientation that we get, we're orienting this cube based on it, is twice the angle between those 2 vectors in the plane formed by those 2 vectors. And so that applies to 3 d as well. So if we, like, separate these two vectors out, you can see that the cube rotates, uh, after that, and it's like twice the angle between those 2. If you wanna read it read up more on that, look up Quaternion's double cover that talks about why it's twice the angle. And so so why why couldn't you multiply vectors?

Well, probably because your teacher didn't explain geometric algebra to you. Right? But now you can, and and that's that's my talk. Thank you very much for coming.

Speaker 0:

Alright. Thank you so much. So if anything, your talk was both a question and an answer to the multiplication of Kath, Mats, and Rainbows. So there's that. You have produced at least an answer to that very tricky multiplication.

And with that, I would love to open it up for a couple of questions. If it has any.

Speaker 1:

Yeah. There's a really weird cube that they pass around. It's very strange. I probably should have mentioned that there was gonna be questions at the end and now I forgot.

Speaker 0:

What are you exploring next while people think of questions? Sorry, what? What area are you exploring next that you wanna break your brain over?

Speaker 1:

I'm still stuck in quaternions. So I'm in I'm in, like, I've been making, like, a spline library, um, where like, a spline library for Unity that has, like, quaternionic splines. Um, and I wanna, like, implement a bunch of different types of splines in quaternion space, which is really fascinating and weird. And so that's been kind of a recent obsession. Yes.

Is that working?

Speaker 2:

Yeah. Alright.

Speaker 1:

There we go.

Speaker 2:

First of all, I wanna say I love the talk, uh, that you've been giving and also your YouTube channel that

Speaker 1:

Oh, can you talk a little closer? I can

Speaker 2:

Yeah. That I really like your YouTube channel and the talk that you've just

Speaker 1:

been giving. No, thank you.

Speaker 2:

What type of what different type of problems could, uh, do you have that could help with where you would have a benefit for using uh, the wage factor or the, uh, these operations in? What other types of

Speaker 1:

So most of it is useless. Like, if you like this whole talk, waste of time. But it's like again, this is kind of more like reframing things you already knew. Like if you looked up how quaternions worked or how complex numbers worked, they would just be separate systems kind of, but now they're kind of unified in a way that makes more sense. Like like for example, one thing that, like, I think a lot of people, if you want to implement quaternions, most people, even engine developers, probably just, like, copy some code, paste it into their engine, and then call it a day, and now you have quaternium for rotations.

Right? Uh, but one thing that I learned after, like, reading up on how they actually work is, like, you can learn all sorts of, like, tricks with them. So for example, I I had a use case of, um, I wanted I wanted to, like, interpolate and, uh, I don't know which coordinate system we should use. I want to interpolate an orientation along a spline, and then I wanted to add a feature of reversing that spline. So this should turn a 180 degrees in order to reverse that whole spline.

Um, and when I did the math for that, like, you did you know that, like, reversing a quaternion is a swizzle? You just shuffle the components. Like, you can just and in any of these three axes or the world space axes, it's literally just shuffling the components. It's a free operation in terms of like computational power. You don't have to do a full like 180 degree angle axis multiplication.

Right? And stuff like that is like all of these little, like, mathematical tricks that kind of pop out. Um, but if you if you don't really care that much about that, you don't have to learn all of this. It's It's just a useful framework to me at least. And also, if you wanna make a game in any other dimension than 2 d or 3 d, this is also very useful.

Then you really need this. Alright. Any any other questions? People are really hungry. I'm sorry I kept you all this long.

Oh, over there. You get a cube. Thank you. And does your math library support geometric algebra? Um, so, yeah, I do have a math library on GitHub.

I have some geometric algebra components. It's not, like, fully fleshed out. So I I've only been, like, adding things there as I need them. I haven't, like, made it into a library that has literally everything. But I do have a library on my GitHub with, like, um, like, there's a bivector 3 type there.

Um, and there's a, like, rotor 3 type, which is just a quaternion. Right? Um, but I I do have that in my math library. So if you do wanna look into the code of, like, how this might look, uh, my website is up there. Uh, these days there are too many social medias, so just just everything's there.

Just go there, and then you can find all of the links to that. Thanks. Oh, actually, I don't think I have a link to my GitHub there. That's the only link I don't have on my website. Uh, but you can probably find it if you Google, I think.

Alright. Any other questions? And also, you can if if you have other questions, like, later, you can just come up to me and and talk to me. That makes me feel important and happy that I could provide value to all of you. Uh, so please validate my feelings by talking to me later.

Speaker 3:

Hi. Uh, I was just wondering, do you still plan to, uh, do, like, your tools, uh, on other engines too? Like, for on a real engine, for example, your Spline upcoming tool?

Speaker 1:

I've considered it, uh, like obviously with all of the Unity disaster. Um, I've considered it. And I looked into Godot and I looked into Unreal, but they're just they're very different tools. Like, Unreal is like it's a level designer and level artist tool that turned into a game engine. And Godot is like it's just engineers making an engine for engineers, and it's very engineer.

Uh, and I feel it's not very artist focused. And then anytime I try to do something that I do in Unity of, like, making quick editor scripts and just, like, have that really fast iteration, that is just destroyed in Unreal. In Godot, I think it's a bit more balanced because they have, like, a more, like, easy to use, like, scripting language and whatnot. But I don't know. Like, if I like, I make, like, 70% of my income is from selling plugins in Unity.

Um, and so, like, could I really support that in Godot, which is, like, very, like, open source free software driven? And I'm like, I don't know. I think that community is not, like, quite, like, big enough yet to, like, support something like the tools that I do. And so, like, if anything, I might, like, transition to doing, like, stand alone tools, just separate EXEs that you open rather than, like, tying it to any specific engine. Um, or I'm just gonna go back to making games again, uh, because, yeah, I kinda kinda wanna do that, but yep.

Yep. Uh, right. I I think we got a sign that we should cut. Yes. A stoic nod.

Like, alright. Thank you all so much for coming. Uh, or did you wanna close out? Or

Speaker 0:

No. We're good.

Speaker 1:

Oh, okay.

Speaker 0:

Okay. Alright. Thank you all. It's time for lunch.


----------------------------------------------------
----------------------------------------------------

# comment by the video creator

some notes/clarification:

• "I don't like the title" I thought it was fun, and it's a good conversation starter and defines the whole trajectory of this talk!

• at 9:55, when I multiply natural numbers - snailcats are not "units" they are creatures equal to 1 so im right and you're all wrong get out of here with your obsession with units!!
"but freya it should be 6 snailcats squared" you're square >:(

• at 11:42, there's some nuance in how we define closure for division, since you usually can't divide by 0, so technically there's exceptions here, but the general idea stands if we ignore 0 :)

• at 25:14, the divine truth bestowed upon us by salad, of v² = |v|², only applies to vectors - it does not apply to bivectors or rotors, or anything else! In my approach, this is a fundamental axiom, which is one way you can define a clifford algebra, in case you want to read up on this some more! It is our starting point, the initial assumption, similar to how i² = -1 is the initial axiom/definition for the imaginary unit. There are other ways of defining clifford algebras, as usual in math, definitions can work from many directions, and the math works out the same way regardless, I just happened to pick this approach for this talk, because I think there's particular beauty in how it so cleanly produces many of the products and constructs we're familiar with!

• at 28:27, the reason I'm expanding (x+y)² to xx+xy+yx+yy instead of xx+2xy+yy, is because at this point we don't know whether multiplying vectors is a commutative operation, so we can't say for sure if we can simply swap x and y here. Real numbers are commutative, but in this case we have to be careful, because these aren't real numbers, they're symbols representing our basis vectors! And as it turns out in the end, vector multiplication is in fact non-commutative, as is the whole VGA multivector multiplication

• at 28:57, the rule of swapping xy = -yx only applies to orthonormal vectors, like our basis vectors, which are orthogonal, and of unit length, hence the name orthonormal. This rule does not apply to arbitrary vectors in the general case

• at 43:40 when I apply the quaternion as a rotation to the cube, it assumes the two vectors a and b are normalized, which results in a unit quaternion (a quaternion with a magnitude of 1), which is what we often use for rotations in games. However, for two general vectors, the quaternion/rotor result of multiplying them together is not a unit quaternion, and is thus not a valid rotation representation